//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MySoapConsumer.UnitConversionService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Temperature", Namespace="http://schemas.datacontract.org/2004/07/MySoapService")]
    [System.SerializableAttribute()]
    public partial class Temperature : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MySoapConsumer.UnitConversionService.TemperatureUnit UnitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MySoapConsumer.UnitConversionService.TemperatureUnit Unit {
            get {
                return this.UnitField;
            }
            set {
                if ((this.UnitField.Equals(value) != true)) {
                    this.UnitField = value;
                    this.RaisePropertyChanged("Unit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TemperatureUnit", Namespace="http://schemas.datacontract.org/2004/07/MySoapService")]
    public enum TemperatureUnit : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Celsius = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Fahrenheit = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UnitConversionService.IUnitConversion")]
    public interface IUnitConversion {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitConversion/FeetToMeeters", ReplyAction="http://tempuri.org/IUnitConversion/FeetToMeetersResponse")]
        double FeetToMeeters(double feet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitConversion/FeetToMeeters", ReplyAction="http://tempuri.org/IUnitConversion/FeetToMeetersResponse")]
        System.Threading.Tasks.Task<double> FeetToMeetersAsync(double feet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitConversion/ConvertTemp", ReplyAction="http://tempuri.org/IUnitConversion/ConvertTempResponse")]
        MySoapConsumer.UnitConversionService.Temperature ConvertTemp(MySoapConsumer.UnitConversionService.Temperature temp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitConversion/ConvertTemp", ReplyAction="http://tempuri.org/IUnitConversion/ConvertTempResponse")]
        System.Threading.Tasks.Task<MySoapConsumer.UnitConversionService.Temperature> ConvertTempAsync(MySoapConsumer.UnitConversionService.Temperature temp);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUnitConversionChannel : MySoapConsumer.UnitConversionService.IUnitConversion, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UnitConversionClient : System.ServiceModel.ClientBase<MySoapConsumer.UnitConversionService.IUnitConversion>, MySoapConsumer.UnitConversionService.IUnitConversion {
        
        public UnitConversionClient() {
        }
        
        public UnitConversionClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UnitConversionClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UnitConversionClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UnitConversionClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double FeetToMeeters(double feet) {
            return base.Channel.FeetToMeeters(feet);
        }
        
        public System.Threading.Tasks.Task<double> FeetToMeetersAsync(double feet) {
            return base.Channel.FeetToMeetersAsync(feet);
        }
        
        public MySoapConsumer.UnitConversionService.Temperature ConvertTemp(MySoapConsumer.UnitConversionService.Temperature temp) {
            return base.Channel.ConvertTemp(temp);
        }
        
        public System.Threading.Tasks.Task<MySoapConsumer.UnitConversionService.Temperature> ConvertTempAsync(MySoapConsumer.UnitConversionService.Temperature temp) {
            return base.Channel.ConvertTempAsync(temp);
        }
    }
}
